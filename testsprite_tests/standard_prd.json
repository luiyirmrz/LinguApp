{
  "meta": {
    "project": "LinguApp",
    "date": "2025-09-05",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "LinguApp is a comprehensive mobile language learning application designed to provide an immersive and gamified learning experience. It supports multiple languages, structured CEFR-based progression from beginner to advanced levels, and includes advanced features like spaced repetition, speech practice, and offline learning to ensure deep, measurable language acquisition.",
  "core_goals": [
    "Create a scalable platform supporting multiple languages and CEFR levels (A1 to C2).",
    "Deliver measurable language learning progress using XP, levels, and CEFR benchmarks.",
    "Engage users through gamification features including achievements, leaderboards, and adaptive challenges.",
    "Provide personalized learning experiences with adaptive difficulty, customizable word lists, and detailed progress tracking.",
    "Enable offline learning with seamless data synchronization and backup.",
    "Integrate speech recognition and synthesis for pronunciation and listening practice.",
    "Maintain robust authentication, error handling, and performance monitoring."
  ],
  "key_features": [
    "Comprehensive Authentication System with multiple providers (email, Google, Apple, GitHub), session management, and security.",
    "CEFR-based Language Learning System featuring structured lessons, vocabulary banks, grammar explanations, and spaced repetition.",
    "Advanced Gamification System including XP, streaks, hearts, achievements, and leaderboards.",
    "Multilingual Framework supporting English, Spanish, French, Italian, Croatian, and Chinese.",
    "Speech and Audio System integrating speech-to-text and text-to-speech for pronunciation practice.",
    "Unified Data Management with Firebase Firestore and local SQLite storage, supporting offline use and synchronization.",
    "Comprehensive Error Handling and Analytics including centralized error reporting and performance monitoring.",
    "Backend API utilizing Hono and tRPC for scalable and efficient data handling."
  ],
  "user_flow_summary": [
    "User signs up or logs in using preferred authentication method.",
    "User selects or sets main and target languages and optionally takes placement test.",
    "User progresses through lessons organized by CEFR levels unlocking content progressively.",
    "User engages in varied practice modes including flashcards, multiple choice, speaking, listening, and writing exercises.",
    "User earns XP and records streaks to unlock achievements and climb leaderboards.",
    "Spaced repetition schedules review of vocabulary and grammar based on user performance.",
    "User tracks detailed progress statistics and adapts learning difficulty.",
    "Data synchronizes automatically between local storage and cloud for offline and online continuity.",
    "User receives real-time pronunciation feedback using speech recognition and participates in listening exercises.",
    "System handles errors centrally and collects analytics for improving app performance."
  ],
  "validation_criteria": [
    "Successful multi-provider authentication with secure session management.",
    "Accurate lesson delivery and CEFR-aligned progression verified through user activity.",
    "Proper tracking and awarding of XP, hearts, streaks, and achievements in gamification.",
    "Reliable offline data storage and synchronization ensuring no data loss.",
    "Seamless speech recognition and text-to-speech functionality with high accuracy.",
    "Support for all six supported languages with correct language content rendering.",
    "Error reports and performance metrics captured and accessible via analytics dashboard.",
    "Backend API responsiveness and scalability under load validated through testing.",
    "User experience flows completed without critical errors and with timely feedback."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "React Native",
      "Expo",
      "Firebase",
      "tRPC",
      "Hono",
      "Zustand",
      "React Query",
      "NativeWind",
      "SQLite",
      "Firestore"
    ],
    "features": [
      {
        "name": "Authentication System",
        "description": "Comprehensive authentication system with Firebase Auth integration, multiple providers (email/password, Google, Apple, GitHub), security features, rate limiting, and session management",
        "files": [
          "services/auth.ts",
          "services/enhancedAuthService.ts",
          "services/securityService.ts",
          "hooks/useAuth.tsx",
          "hooks/useUnifiedAuth.tsx",
          "components/AuthWrapper.tsx",
          "components/AuthErrorFeedback.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Authentication API",
            "version": "1.0.0",
            "description": "Authentication and user management endpoints"
          },
          "paths": {
            "/auth/signin": {
              "post": {
                "summary": "Sign in with email and password",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string",
                            "format": "email"
                          },
                          "password": {
                            "type": "string",
                            "minLength": 8
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Successful authentication",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "user": {
                              "$ref": "#/components/schemas/User"
                            },
                            "token": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/auth/signup": {
              "post": {
                "summary": "Create new user account",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string",
                            "format": "email"
                          },
                          "password": {
                            "type": "string",
                            "minLength": 8
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "components": {
            "schemas": {
              "User": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "points": {
                    "type": "number"
                  },
                  "hearts": {
                    "type": "number"
                  },
                  "streak": {
                    "type": "number"
                  },
                  "level": {
                    "type": "string"
                  },
                  "languages": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Language Learning System",
        "description": "Comprehensive language learning system with CEFR-based progression (A1-C2), multilingual support, adaptive learning, spaced repetition, and gamification",
        "files": [
          "services/comprehensiveLessonGenerator.ts",
          "services/comprehensiveLessonManager.ts",
          "services/enhancedGamificationService.ts",
          "components/ComprehensiveLessonScreen.tsx",
          "components/GreetingsLessonScreen.tsx",
          "components/GreetingsModuleScreen.tsx",
          "data/greetingsModule.ts",
          "types/didactic.ts",
          "types/greetings.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Language Learning API",
            "version": "1.0.0",
            "description": "Language learning content and progress management"
          },
          "paths": {
            "/lessons": {
              "get": {
                "summary": "Get lessons for user",
                "parameters": [
                  {
                    "name": "level",
                    "in": "query",
                    "schema": {
                      "type": "string",
                      "enum": [
                        "A1",
                        "A2",
                        "B1",
                        "B2",
                        "C1",
                        "C2"
                      ]
                    }
                  },
                  {
                    "name": "language",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "List of lessons",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Lesson"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/lessons/{lessonId}/start": {
              "post": {
                "summary": "Start a lesson",
                "parameters": [
                  {
                    "name": "lessonId",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Lesson started successfully"
                  }
                }
              }
            }
          },
          "components": {
            "schemas": {
              "Lesson": {
                "type": "object",
                "properties": {
                  "lessonId": {
                    "type": "string"
                  },
                  "level": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "exercises": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Exercise"
                    }
                  },
                  "xpReward": {
                    "type": "number"
                  },
                  "estimatedTime": {
                    "type": "number"
                  }
                }
              },
              "Exercise": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "flashcard",
                      "multiple_choice",
                      "fill_blank",
                      "listening",
                      "speaking"
                    ]
                  },
                  "question": {
                    "type": "string"
                  },
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "correctAnswer": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Gamification System",
        "description": "Advanced gamification system with XP, streaks, lives, achievements, leaderboards, and alternative learning paths",
        "files": [
          "services/enhancedGamificationService.ts",
          "hooks/useGameState.tsx",
          "components/SRSFlashcardComponent.tsx",
          "components/SocialFeatures.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Gamification API",
            "version": "1.0.0",
            "description": "Gamification and progress tracking endpoints"
          },
          "paths": {
            "/gamification/state": {
              "get": {
                "summary": "Get user gamification state",
                "responses": {
                  "200": {
                    "description": "User gamification state",
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/GamificationState"
                        }
                      }
                    }
                  }
                }
              }
            },
            "/gamification/achievements": {
              "get": {
                "summary": "Get user achievements",
                "responses": {
                  "200": {
                    "description": "List of achievements",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Achievement"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "components": {
            "schemas": {
              "GamificationState": {
                "type": "object",
                "properties": {
                  "xp": {
                    "type": "number"
                  },
                  "level": {
                    "type": "number"
                  },
                  "streak": {
                    "type": "number"
                  },
                  "hearts": {
                    "type": "number"
                  },
                  "gems": {
                    "type": "number"
                  },
                  "achievements": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "Achievement": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "icon": {
                    "type": "string"
                  },
                  "unlocked": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Multilingual Framework",
        "description": "Comprehensive multilingual framework supporting 6 languages (English, Spanish, French, Italian, Croatian, Chinese) with bidirectional learning",
        "files": [
          "hooks/useLanguage.tsx",
          "hooks/useMultilingualLearning.tsx",
          "components/EnhancedLanguageSelector.tsx",
          "components/MainLanguageSelector.tsx",
          "constants/i18n.ts",
          "mocks/languages.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Multilingual API",
            "version": "1.0.0",
            "description": "Language selection and multilingual content management"
          },
          "paths": {
            "/languages": {
              "get": {
                "summary": "Get supported languages",
                "responses": {
                  "200": {
                    "description": "List of supported languages",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Language"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/user/language-settings": {
              "put": {
                "summary": "Update user language settings",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/LanguageSettings"
                      }
                    }
                  }
                }
              }
            }
          },
          "components": {
            "schemas": {
              "Language": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "nativeName": {
                    "type": "string"
                  },
                  "flag": {
                    "type": "string"
                  }
                }
              },
              "LanguageSettings": {
                "type": "object",
                "properties": {
                  "mainLanguage": {
                    "type": "string"
                  },
                  "targetLanguage": {
                    "type": "string"
                  },
                  "showTranslations": {
                    "type": "boolean"
                  },
                  "showPhonetics": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Speech and Audio System",
        "description": "Speech-to-text and text-to-speech integration for pronunciation practice and listening exercises",
        "files": [
          "components/STTExample.tsx",
          "components/PronunciationFeedback.tsx",
          "services/speechService.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Speech API",
            "version": "1.0.0",
            "description": "Speech recognition and synthesis endpoints"
          },
          "paths": {
            "/speech/recognize": {
              "post": {
                "summary": "Convert speech to text",
                "requestBody": {
                  "required": true,
                  "content": {
                    "multipart/form-data": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "audio": {
                            "type": "string",
                            "format": "binary"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Recognized text",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "text": {
                              "type": "string"
                            },
                            "confidence": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/speech/synthesize": {
              "post": {
                "summary": "Convert text to speech",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string"
                          },
                          "language": {
                            "type": "string"
                          },
                          "voice": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Audio file URL",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "audioUrl": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Data Management System",
        "description": "Unified data management system with Firebase Firestore integration, local SQLite storage, and offline synchronization",
        "files": [
          "services/firestoreService.ts",
          "services/databaseService.ts",
          "services/unifiedService.ts",
          "store/unifiedStore.ts",
          "hooks/useDataSync.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Data Management API",
            "version": "1.0.0",
            "description": "Data storage and synchronization endpoints"
          },
          "paths": {
            "/data/sync": {
              "post": {
                "summary": "Synchronize local data with cloud",
                "responses": {
                  "200": {
                    "description": "Synchronization completed"
                  }
                }
              }
            },
            "/data/backup": {
              "post": {
                "summary": "Create data backup",
                "responses": {
                  "200": {
                    "description": "Backup created successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Error Handling and Analytics",
        "description": "Comprehensive error handling system with centralized error service, analytics dashboard, and performance monitoring",
        "files": [
          "services/centralizedErrorService.ts",
          "components/EnhancedErrorBoundary.tsx",
          "components/ErrorAnalyticsDashboard.tsx",
          "components/SecurityMonitoringComponent.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Error Handling API",
            "version": "1.0.0",
            "description": "Error reporting and analytics endpoints"
          },
          "paths": {
            "/errors/report": {
              "post": {
                "summary": "Report application error",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string"
                          },
                          "stack": {
                            "type": "string"
                          },
                          "context": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/analytics/performance": {
              "get": {
                "summary": "Get performance analytics",
                "responses": {
                  "200": {
                    "description": "Performance metrics"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Backend API",
        "description": "Backend API built with Hono and tRPC for efficient data handling and scalability",
        "files": [
          "backend/hono.ts",
          "backend/trpc/app-router.ts",
          "backend/trpc/create-context.ts",
          "backend/trpc/routes/example/hi/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Backend API",
            "version": "1.0.0",
            "description": "Backend services and API endpoints"
          },
          "paths": {
            "/api/trpc/example.hi": {
              "post": {
                "summary": "Example tRPC endpoint",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Hello response",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "hello": {
                              "type": "string"
                            },
                            "date": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "/": {
              "get": {
                "summary": "Health check endpoint",
                "responses": {
                  "200": {
                    "description": "API status",
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
